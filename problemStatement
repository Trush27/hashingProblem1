Harkirat owns a chocolate maker company in a market where every chocolate has a unique ID number. 
Given an array where each element represents a sale of a chocolate by its ID, and a specific chocolate ID that Harkirat's company sells, 
Harkirat wants to achieve a monopoly by ensuring his company sells more chocolates of his specific ID than any other ID in the market.
Determine the number of additional chocolates Harkirat needs to sell to surpass the current maximum sales of any single chocolate ID in the market.

Input:
An array of integers where each integer represents the ID of a chocolate sold.
An integer representing the ID of the chocolate sold by Harkirat's company.
Output:
The minimum number of additional chocolates Harkirat needs to sell to achieve a monopoly with his specific chocolate ID.
using System.Diagnostics;
using System.Net.Mail;
using System.Net;
using Microsoft.AspNetCore.Mvc;
using backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;

namespace backend.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly PostgresContext _dbcontext;
        private readonly IConfiguration _config;

        public HomeController(ILogger<HomeController> logger, PostgresContext context, IConfiguration config)
        {
            _logger = logger;
            _dbcontext = context;
            _config = config;
        }

        public IActionResult Index()
        {
            string UserEmail = HttpContext.Session.GetString("Email");
            if (UserEmail != null)
            {
                var existingUser = _dbcontext.Userlogins.Any(u => u.Email == UserEmail);
                if (existingUser)
                {
                    return RedirectToAction("Content", "Main");
                }
            }
            if (Request.Cookies["Email"] != null)
            {
                return RedirectToAction("Content", "Main");
            }
            return View();
        }

        public IActionResult ForgotPassword(string email)
        {
            var vm = new userEmail(email);
            return View(vm);
        }

        [HttpGet]
        public IActionResult ResetPassword(string email)
        {
            return View(new ResetPasswordModel { Email = email });
        }

        [HttpPost]
        public IActionResult ResetPassword(ResetPasswordModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            if (model.NewPassword != model.ConfirmPassword)
            {
                ModelState.AddModelError("ConfirmPassword", "Passwords do not match");
                return View(model);
            }

            var user = _dbcontext.Userlogins.FirstOrDefault(u => u.Email == model.Email);
            if (user == null)
            {
                return RedirectToAction("Index", "Home");
            }
            user.Password = encryptPassword(model.NewPassword);
            _dbcontext.SaveChanges();
            return RedirectToAction("Index", "Home");
        }

        [HttpPost]
        public IActionResult Login(UserDemo model)
        {
            string userPassword = encryptPassword(model.Password);
            var existingUser = _dbcontext.Userlogins.FirstOrDefault(u => u.Email == model.Email && u.Password == userPassword);
            if (existingUser != null)
            {
                HttpContext.Session.SetString("Email", model.Email);
                if (model.IsRemember)
                {
                    CookieOptions cookie = new CookieOptions()
                    {
                        Expires = DateTime.Now.AddDays(30)
                    };

                    Response.Cookies.Append("Email", model.Email, cookie);
                    Response.Cookies.Append("Password", model.Password, cookie);
                }
                else return RedirectToAction("Content", "Main");
            }
            return RedirectToAction("Index", "Home");
        }

        [HttpPost]
        public IActionResult SendEmailLink(userEmail model)
        {
            string toemail = model.Email;
            SendEmail(toemail);
            return RedirectToAction("Index", "Home");
        }

        public void SendEmail(string toemail)
        {
            try
            {
                string emailBody = $@"<a href='http://localhost:5150/Home/ResetPassword?email={WebUtility.UrlEncode(toemail)}'>Reset Password</a>";
                string smtpEmail = _config.GetValue<string>("SMTPCredentials:Email");
                string smtpappPass = _config.GetValue<string>("SMTPCredentials:AppPass");

                SmtpClient smtpclient = new SmtpClient("mail.etatvasoft.com")
                {
                    Port = 587,
                    Credentials = new NetworkCredential(smtpEmail, smtpappPass),
                    EnableSsl = true,
                };

                MailMessage mail = new MailMessage
                {
                    From = new MailAddress(smtpEmail),
                    Subject = "Reset Password for PizzaShop",
                    Body = emailBody,
                    IsBodyHtml = true,
                };
                mail.To.Add(toemail);
                smtpclient.Send(mail);
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }

        public static string encryptPassword(string pass)
        {
            byte[] encode = new byte[pass.Length];
            encode = System.Text.Encoding.UTF8.GetBytes(pass);
            string encodedData = Convert.ToBase64String(encode);
            return encodedData;
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

@model ResetPasswordModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row d-flex justify-content-center align-items-center">
    <img class="col" src="~/images/logos/pizzashop_logo.png" height="70px" width="70px">
    <div class="col fs-2 pizza-shop-header">
        PIZZASHOP
    </div>
</div>
<div class="row w-100 p-0">
    <p class="col fs-3 welcome-text mx-8 my-1 p-0">Reset Your Password</p>
</div>
<form class="row" asp-controller="Home" asp-action="ResetPassword" method="post">
    <div class="row w-100">
        <div class="col mx-8 my-2 position-relative w-100 p-0">
            <input type="password" placeholder="New Password" class="icon-password col w-100 align-items-center" asp-for="NewPassword">
            <i class="bi bi-eye-slash" id="togglePassword"></i>
        </div>
    </div>
    <div class="row w-100">
        <div class="col mx-8 position-relative w-100 p-0">
            <input type="password" placeholder="Confirm New Password" class="icon-password col w-100 align-items-center" asp-for="ConfirmPassword">
            <i class="bi bi-eye-slash" id="togglePassword"></i>
        </div>
    </div>
    <div class="row d-flex w-100">
        <button type="submit" class="submit-button col mx-8 my-2">Submit</button>
    </div>
    <div class="row w-100">
        <div class="col d-flex w-100 justify-content-center align-items-center my-2">
            <a asp-controller="Home" asp-action="Index" class="row text-decoration-none">
                Back to Login
            </a>
        </div>
    </div>
</form>

